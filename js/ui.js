// ui.js
// DOM interactions and rendering
window.onload = () => {
  const dom = {
    btc: document.getElementById('btc'),
    usd: document.getElementById('usd'),
    rate: document.getElementById('rate'),
    hashes: document.getElementById('hashes'),
    hpFill: document.getElementById('hpFill'),
    armorFill: document.getElementById('armorFill'),
    clickMob: document.getElementById('clickMob'),
    slots: document.getElementById('slots'),
    toggleSlotsBtn: document.getElementById('toggleSlotsBtn'),
    inventoryList: document.getElementById('inventoryList'),
    shopMenu: document.getElementById('shopMenu'),
    slotMenu: document.getElementById('slotMenu'),
    invBtn: document.getElementById('invBtn'),
    sellHashesBtn: document.getElementById('sellHashesBtn'),
    sellBTCBtn: document.getElementById('sellBTCBtn'),
    refreshRateBtn: document.getElementById('refreshRateBtn'),
    shopBtn: document.getElementById('shopBtn'),
    speedBtns: Array.from(document.querySelectorAll('.speed-buttons button'))
  };

  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Å–ª–æ—Ç
  let slotsCollapsed = true;

  // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å BTC‚ÜíUSD –∏ –ø–∏—à–µ–º –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  async function fetchRate() {
    try {
      const res  = await fetch('https://api.coinbase.com/v2/exchange-rates?currency=BTC');
      if (!res.ok) throw new Error();
      const data = await res.json();
      dom.rate.textContent = parseFloat(data.data.rates.USD).toFixed(2);
    } catch {
      dom.rate.textContent = '‚Äî';
    }
  }

  // –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
  function renderInventoryList() {
    dom.inventoryList.innerHTML = `
      <div class="close-btn" onclick="toggleInventory()">√ó</div>
      <h4>üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</h4>`;
    Object.entries(Game.inventory).forEach(([name, count]) => {
      const item = document.createElement('div');
      item.className   = 'menu-item';
      item.textContent = `${name}: ${count}`;
      if (count > 0) {
        const btn = document.createElement('button');
        btn.textContent = '–ü—Ä–æ–¥–∞—Ç—å';
        btn.onclick     = () => {
          if (Game.sellCard(name)) {
            updateUI();
            alert(`üóëÔ∏è –ü—Ä–æ–¥–∞–Ω–∞ –∫–∞—Ä—Ç–∞ ${name} –∑–∞ $${Game.videoCards.find(c=>c.name===name).costUSD}`);
            renderInventoryList();
          } else {
            alert('–ù–µ—Ç –∫–∞—Ä—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏');
          }
        };
        item.appendChild(btn);
      }
      dom.inventoryList.appendChild(item);
    });
  }

  // –†–µ–Ω–¥–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –∏ –∞–ø–≥—Ä–µ–π–¥–∞ –∫–ª–∏–∫–∞
  function renderShopMenu() {
    dom.shopMenu.innerHTML = `
      <div class="close-btn" onclick="toggleShop()">√ó</div>
      <h4>üõí –ú–∞–≥–∞–∑–∏–Ω</h4>`;

    // –ê–ø–≥—Ä–µ–π–¥ –∫–ª–∏–∫–∞
    const upg = document.createElement('div');
    upg.className   = 'menu-item';
    upg.textContent = `Upgrade Click (+1) ‚Äî $${Game.clickUpgradeCostUSD}`;
    upg.onclick     = () => {
      if (Game.buyClickUpgrade()) {
        updateUI();
        alert(`‚ú® –°–∏–ª–∞ –∫–ª–∏–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ ${Game.clickPower} —Ö–µ—à–µ–π –∑–∞ –∫–ª–∏–∫`);
        renderShopMenu();
      } else {
        alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USD –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞ –∫–ª–∏–∫–∞');
      }
    };
    dom.shopMenu.appendChild(upg);

    // –ü–æ–∫—É–ø–∫–∞ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç
    Game.videoCards.forEach(card => {
      const it = document.createElement('div');
      it.className   = 'menu-item';
      it.textContent = `${card.name} ‚Äî $${card.costUSD}`;
      it.onclick     = () => {
        Game.buyCard(card.name);
        updateUI();
        alert(`üõí –ö—É–ø–ª–µ–Ω–∞ –∫–∞—Ä—Ç–∞ ${card.name}`);
        renderShopMenu();
      };
      dom.shopMenu.appendChild(it);
    });
  }

  // –û—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
  function toggleInventory() {
    dom.inventoryList.classList.toggle('hidden');
    if (!dom.inventoryList.classList.contains('hidden')) {
      renderInventoryList();
    }
  }

  // –û—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω
  function toggleShop() {
    dom.shopMenu.classList.toggle('hidden');
    if (!dom.shopMenu.classList.contains('hidden')) {
      renderShopMenu();
    }
  }

  // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
  dom.clickMob.onclick               = () => handleClick();
  dom.clickMob.addEventListener('contextmenu', e => e.preventDefault());
  dom.clickMob.addEventListener('dragstart',     e => e.preventDefault());
  dom.clickMob.addEventListener('dblclick',      e => e.preventDefault());

  dom.invBtn.onclick                 = () => toggleInventory();
  dom.sellHashesBtn.onclick          = () => { Game.sellHashes(); updateUI(); };
  dom.sellBTCBtn.onclick             = async () => {
    try {
      const { rate, usdGain } = await Game.sellBTCForUSD();
      dom.rate.textContent      = rate.toFixed(2);
      updateUI();
      alert(`üí≤ –ü—Ä–æ–¥–∞–Ω–æ ${(usdGain/rate).toFixed(4)} BTC @ ${rate.toFixed(2)} ‚Üí +${usdGain.toFixed(2)} USD`);
    } catch {
      alert('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å');
    }
  };
  dom.refreshRateBtn.onclick         = fetchRate;
  dom.toggleSlotsBtn.onclick         = () => {
    slotsCollapsed = !slotsCollapsed;
    dom.toggleSlotsBtn.textContent = slotsCollapsed ? '+ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å' : '- –°–≤–µ—Ä–Ω—É—Ç—å';
    updateUI();
  };
  dom.shopBtn.onclick                = () => toggleShop();
  dom.speedBtns.forEach(btn => btn.onclick = () => setSpeed(btn.dataset.speed));

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  Game.init();
  fetchRate();
  setInterval(updateUI, 1000);
  updateUI();

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –º–æ–±—É
  function handleClick() {
    const { damage, isCrit, ach } = Game.clickMob();
    showDamage(damage, isCrit);
    if (Math.random() < 0.2) spawnMoney(damage);
    if (ach) alert(ach.message);
    updateUI();
  }

  // –ü–æ–∫–∞–∑ —É—Ä–æ–Ω–∞
  function showDamage(dmg, crit) {
    const pop = document.createElement('div');
    pop.className   = 'damage-popup';
    pop.textContent = crit ? `üí• -${dmg}` : `-${dmg}`;
    dom.clickMob.appendChild(pop);
    setTimeout(() => pop.remove(), 500);
  }

  // –õ–µ—Ç–∞—é—â–∏–µ —ç–º–æ–¥–∂–∏ –¥–µ–Ω–µ–≥
  function spawnMoney(dmg) {
    const cont = document.getElementById('game');
    const gR   = cont.getBoundingClientRect();
    const mR   = dom.clickMob.getBoundingClientRect();
    const x0   = mR.left - gR.left + mR.width/2;
    const y0   = mR.top  - gR.top  + mR.height/2;

    for (let i = 0; i < 6; i++) {
      const e = document.createElement('div');
      e.className   = 'money-emoji';
      e.textContent = 'üí∞';
      e.style.left  = `${x0}px`;
      e.style.top   = `${y0}px`;
      cont.appendChild(e);

      const angle = Math.random() * 2 * Math.PI;
      const dist  = 100 + Math.random() * 50;
      requestAnimationFrame(() => {
        e.style.transform = `translate(${Math.cos(angle)*dist}px,${Math.sin(angle)*dist}px)`;
        e.style.opacity   = '0';
      });

      e.addEventListener('click', () => {
        Game.hashes += dmg * 5;
        cont.removeChild(e);
      }, { once: true });

      setTimeout(() => { if (e.parentNode) cont.removeChild(e); }, 5000);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ UI
  function updateUI() {
    dom.btc.textContent    = Game.btc.toFixed(4);
    dom.usd.textContent    = Game.usd.toFixed(2);
    dom.hashes.textContent = Game.hashes.toFixed(0);
    renderHp();
    renderSlots();
  }

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ HP –∏ –±—Ä–æ–Ω–∏
  function renderHp() {
    dom.hpFill.style.width      = `${(Game.mobHp/Game.mobMaxHp)*100}%`;
    dom.hpFill.style.background = Game.mobHp/Game.mobMaxHp > 0.3 ? '#0f0' : '#999';
    dom.armorFill.style.width   = `${(Game.armorHp/Game.mobMaxHp)*100}%`;
    dom.clickMob.style.backgroundImage = `url('assets/mob${(Game.mobLevel%10)+1}.png')`;
  }

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ª–æ—Ç–æ–≤ —Å —É—á—ë—Ç–æ–º —Å–≤—ë—Ä–Ω—É—Ç–æ—Å—Ç–∏
  function renderSlots() {
    dom.slots.innerHTML = '';
    const toShow = slotsCollapsed ? [0] : Game.slots.map((_,i) => i);
    toShow.forEach(i => {
      const gpu = Game.slots[i];
      const div = document.createElement('div');
      div.className = 'slot';
      if (gpu === 'locked') {
        div.classList.add('locked');
        div.textContent = `üîí Slot ${i+1} ($${(i+1)*50})`;
        div.onclick     = () => { Game.unlockSlot(i); updateUI(); };
      } else {
        div.textContent = gpu
          ? `${gpu.name} (${gpu.hashRate} h/s)`
          : `+ Insert GPU into slot ${i+1}`;
        div.onclick     = () => openSlotMenu(i);
      }
      dom.slots.appendChild(div);
    });
  }

  // –ú–µ–Ω—é —Å–ª–æ—Ç–∞: —É–¥–∞–ª–∏—Ç—å/–∑–∞–º–µ–Ω–∏—Ç—å –∏–ª–∏ –≤—Å—Ç–∞–≤–∏—Ç—å GPU
  function openSlotMenu(index) {
    dom.slotMenu.classList.remove('hidden');
    dom.slotMenu.innerHTML = `
      <div class="close-btn" onclick="closeSlotMenu()">√ó</div>
      <h4>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É:</h4>`;
    // –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ä—Ç—ã
    if (Game.slots[index]) {
      const rm = document.createElement('div');
      rm.className   = 'menu-item';
      rm.textContent = '–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É –∏–∑ —Å–ª–æ—Ç–∞';
      rm.onclick     = () => { Game.removeGPU(index); closeSlotMenu(); updateUI(); };
      dom.slotMenu.appendChild(rm);
    }
    // –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    Object.entries(Game.inventory).forEach(([name,count]) => {
      if (count > 0) {
        const item = document.createElement('div');
        item.className   = 'menu-item';
        item.textContent = `${name} (${count})`;
        item.onclick     = () => { Game.insertGPU(index,name); closeSlotMenu(); updateUI(); };
        dom.slotMenu.appendChild(item);
      }
    });
  }
  window.closeSlotMenu = () => dom.slotMenu.classList.add('hidden');

  // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è inline onclick
  window.toggleShop      = toggleShop;
  window.toggleInventory = toggleInventory;
};
